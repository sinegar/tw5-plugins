created: 20150315071209724
dependents: 
description: Import csv (text/csv) files
modified: 20150506000113888
plugin-type: plugin
tags: $:/plugins/sinegar/csv/info
title: $:/plugins/sinegar/csv
type: application/json
version: 0.0.4

{
    "tiddlers": {
        "$:/plugins/sinegar/csv/deserializer.js": {
            "created": "20150315071305244",
            "text": "/*\\\ntitle: $:/plugins/sinegar/csv/deserializer.js\ntype: application/javascript\nmodule-type: tiddlerdeserializer\n\nFunctions to deserialise tiddlers from a csv block of text\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n    // http://www.bennadel.com/blog/1504-ask-ben-parsing-csv-strings-with-javascript-exec-regular-expression-command.htm\n    //\n    // This will parse a delimited string into an array of\n    // arrays. The default delimiter is the comma, but this\n    // can be overriden in the second argument.\n    function CSVToArray( strData, strDelimiter ){\n        // Check to see if the delimiter is defined. If not,\n        // then default to comma.\n        strDelimiter = (strDelimiter || \",\");\n\n        // Create a regular expression to parse the CSV values.\n        var objPattern = new RegExp(\n            (\n                // Delimiters.\n                \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n                // Quoted fields.\n                \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n                // Standard fields.\n                \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n            ),\n            \"gi\"\n            );\n\n\n        // Create an array to hold our data. Give the array\n        // a default empty first row.\n        var arrData = [[]];\n\n        // Create an array to hold our individual pattern\n        // matching groups.\n        var arrMatches = null;\n\n\n        // Keep looping over the regular expression matches\n        // until we can no longer find a match.\n        while (arrMatches = objPattern.exec( strData )){\n\n            // Get the delimiter that was found.\n            var strMatchedDelimiter = arrMatches[ 1 ];\n\n            // Check to see if the given delimiter has a length\n            // (is not the start of string) and if it matches\n            // field delimiter. If id does not, then we know\n            // that this delimiter is a row delimiter.\n            if (\n                strMatchedDelimiter.length &&\n                (strMatchedDelimiter != strDelimiter)\n                ){\n\n                // Since we have reached a new row of data,\n                // add an empty row to our data array.\n                arrData.push( [] );\n\n            }\n\n\n            // Now that we have our delimiter out of the way,\n            // let's check to see which kind of value we\n            // captured (quoted or unquoted).\n            if (arrMatches[ 2 ]){\n\n                // We found a quoted value. When we capture\n                // this value, unescape any double quotes.\n                var strMatchedValue = arrMatches[ 2 ].replace(\n                    new RegExp( \"\\\"\\\"\", \"g\" ),\n                    \"\\\"\"\n                    );\n\n            } else {\n\n                // We found a non-quoted value.\n                var strMatchedValue = arrMatches[ 3 ];\n\n            }\n\n\n            // Now that we have our value string, let's add\n            // it to the data array.\n            arrData[ arrData.length - 1 ].push( strMatchedValue );\n        }\n\n        // Return the parsed data.\n        return( arrData );\n    }\n    \nexports[\"text/csv\"] = function(text,fields) {\n\tvar //incoming = JSON.parse(text),\n\t\tresults = [];\n        \n    console.log('CSV detected...');\n    results = CSVToArray(text).reduce(function(list, row, index, array) {\n    \tif (index > 0) {\n        \tvar obj = array[0].reduce(function(obj, fieldName, fieldIndex){\n            \tobj[fieldName] = row[fieldIndex];\n                \n                return obj;\n            }, {});\n            \n            list.push(obj);\n        }\n \n    \treturn list;\n    }, []);\n\n    console.log(results);\n\n\t/*    \n\tif($tw.utils.isArray(incoming)) {\n\t\tfor(var t=0; t<incoming.length; t++) {\n\t\t\tvar incomingFields = incoming[t],\n\t\t\t\tfields = {};\n\t\t\tfor(var f in incomingFields) {\n\t\t\t\tif(typeof incomingFields[f] === \"string\") {\n\t\t\t\t\tfields[f] = incomingFields[f];\n\t\t\t\t}\n\t\t\t}\n\t\t\tresults.push(fields);\n\t\t}\n\t}\n    */\n\treturn results;\n};\n\n\n exports["application/vnd.ms-excel"] = exports["text/csv"];})();\n",
            "bag": "default",
            "revision": "2",
            "type": "application/javascript",
            "title": "$:/plugins/sinegar/csv/deserializer.js",
            "module-type": "tiddlerdeserializer",
            "modified": "20150315071752317",
            "tags": "$:/plugins/sinegar/csv/info"
        }
    }
}
